<?php

namespace giantbits\crelish\actions;

use giantbits\crelish\components\CrelishBaseHelper;
use Yii;
use yii\base\Action;
use yii\web\Response;
use yii\web\BadRequestHttpException;

/**
 * Action for tracking link clicks via HTML ping attribute
 *
 * This action is designed to be called via the HTML ping attribute for unobtrusive click tracking.
 * It includes security measures to prevent abuse and spam.
 *
 * Usage in templates:
 * <a href="https://external-site.com"
 *    ping="/crelish/track/click?uuid={{ element.uuid }}&type={{ element.ctype }}&token={{ chelper.generateClickToken(element.uuid) }}">
 *   External Link
 * </a>
 */
class TrackClickAction extends Action
{
    /**
     * Maximum time window for token validity (in seconds)
     * @var int
     */
    public $tokenValidityWindow = 3600; // 1 hour

    /**
     * Rate limit: maximum clicks per session per element within time window
     * @var int
     */
    public $maxClicksPerElement = 10;

    /**
     * Rate limit time window (in seconds)
     * @var int
     */
    public $rateLimitWindow = 300; // 5 minutes

    /**
     * Handles click tracking requests
     *
     * Expected GET parameters:
     * - uuid: Element UUID being clicked
     * - type: Element type (e.g., 'ad', 'link', 'banner')
     * - token: Security token generated by generateClickToken()
     * - page: Optional page UUID where the click occurred
     *
     * @return Response
     * @throws BadRequestHttpException
     */
    public function run(): Response
    {
        // Set response format - ping requests expect 204 No Content or minimal response
        Yii::$app->response->format = Response::FORMAT_RAW;
        Yii::$app->response->statusCode = 204; // No Content

        // Get parameters
        $uuid = Yii::$app->request->get('uuid');
        $type = Yii::$app->request->get('type', 'link');
        $token = Yii::$app->request->get('token');
        $pageUuid = Yii::$app->request->get('page');

        // Validate required parameters
        if (empty($uuid) || empty($token)) {
            Yii::warning('Click tracking: Missing required parameters (uuid or token)', 'analytics');
            return Yii::$app->response;
        }

        // Verify token to prevent unauthorized tracking
        if (!$this->verifyClickToken($uuid, $token)) {
            Yii::warning('Click tracking: Invalid token for UUID ' . $uuid . ' (token: ' . substr($token, 0, 10) . '...)', 'analytics');
            return Yii::$app->response;
        }

        // Check rate limiting to prevent spam
        if (!$this->checkRateLimit($uuid)) {
            Yii::warning('Click tracking: Rate limit exceeded for UUID ' . $uuid, 'analytics');
            return Yii::$app->response;
        }

        // Skip if analytics component isn't available
        if (!isset(Yii::$app->crelishAnalytics)) {
            Yii::error('Click tracking: crelishAnalytics component not found', 'analytics');
            return Yii::$app->response;
        }

        if (!Yii::$app->crelishAnalytics->enabled) {
            Yii::info('Click tracking: Analytics disabled', 'analytics');
            return Yii::$app->response;
        }

        // Determine page UUID
        if (empty($pageUuid)) {
            $entryPoint = Yii::$app->controller->entryPoint ?? null;
            $pageUuid = $entryPoint['uuid'] ?? Yii::$app->request->get('referer', 'unknown');
        }

        // Track the click using trackElementView with type="click"
        try {
            $result = Yii::$app->crelishAnalytics->trackElementView(
                $uuid,
                $type,
                $pageUuid,
                'click'
            );

            if (YII_DEBUG) {
                Yii::info('Click tracked successfully: ' . json_encode([
                    'uuid' => $uuid,
                    'type' => $type,
                    'page' => $pageUuid,
                    'result' => $result
                ]), 'analytics');
            }
        } catch (\Exception $e) {
            Yii::error('Click tracking failed: ' . $e->getMessage() . ' | Trace: ' . $e->getTraceAsString(), 'analytics');
        }

        return Yii::$app->response;
    }

    /**
     * Verify the security token
     *
     * @param string $uuid Element UUID
     * @param string $token Token to verify
     * @return bool
     */
    private function verifyClickToken($uuid, $token): bool
    {
        // Extract timestamp from token (last 10 characters are base36 timestamp)
        if (strlen($token) < 20) {
            return false;
        }

        $tokenHash = substr($token, 0, -10);
        $tokenTime = base_convert(substr($token, -10), 36, 10);

        // Check if token is within validity window
        $currentTime = time();
        if (($currentTime - $tokenTime) > $this->tokenValidityWindow) {
            return false;
        }

        // Regenerate expected token and compare
        $expectedHash = $this->generateTokenHash($uuid, $tokenTime);

        return hash_equals($expectedHash, $tokenHash);
    }

    /**
     * Generate token hash for verification
     *
     * @param string $uuid Element UUID
     * @param int $timestamp Unix timestamp
     * @return string
     */
    private function generateTokenHash($uuid, $timestamp): string
    {
        $secret = Yii::$app->security->passwordHashStrategy;
        return substr(hash_hmac('sha256', $uuid . $timestamp, $secret), 0, 16);
    }

    /**
     * Check rate limiting to prevent abuse
     *
     * @param string $uuid Element UUID
     * @return bool True if within rate limit, false if exceeded
     */
    private function checkRateLimit($uuid): bool
    {
        $session = Yii::$app->session;
        $sessionKey = 'click_tracking_' . $uuid;

        // Get click history for this element
        $clickHistory = $session->get($sessionKey, []);

        // Remove old entries outside the rate limit window
        $currentTime = time();
        $clickHistory = array_filter($clickHistory, function($timestamp) use ($currentTime) {
            return ($currentTime - $timestamp) <= $this->rateLimitWindow;
        });

        // Check if rate limit exceeded
        if (count($clickHistory) >= $this->maxClicksPerElement) {
            return false;
        }

        // Add current click to history
        $clickHistory[] = $currentTime;
        $session->set($sessionKey, $clickHistory);

        return true;
    }
}