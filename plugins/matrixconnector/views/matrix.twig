{{ use('/yii/grid/GridView') }}
{{ use('/giantbits/crelish/widgets') }}
{{ use('/yii/widgets/Pjax') }}

<div class="form-group field-crelishdynamicmodel-body required">
  <label class="control-label" for="crelishdynamicmodel-body">{{ label }}</label>
  <div class="">
    <matrix_{{ formKey }}></matrix_{{ formKey }}>
    <div class="help-block help-block-error "></div>
  </div>
</div>

<div class="modal fade modal-xl matrix-modal-{{ formKey }}" tabindex="-1" role="dialog"
     aria-labelledby="matrix-modal-{{ formKey }}" id="matrix-modal-{{ formKey }}">
  <div class="modal-dialog" style="height: 80vh;">
    <div class="modal-content gc-bc--palette-clouds" style="height: 100%;">
      <div class="modal-header gc-bc--palette-green-sea gc-fc--palette-clouds">
        <h4 class="modal-title" id="myModalLabel">Content selection</h4>
        <button type="button" class="c-button close pull-right"  data-bs-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body o-panel-container " style=" height: 90%;">
        <div class="o-panel">

          {{ pjax_begin({'id':'contentList', 'enablePushState': true}) }}

            <div class="o-grid gc-bc--palette-clouds">
              <div class="o-grid__cell o-grid__cell--width-20">
                <h6>Type filter</h6>
                <ul role="menu" class="content-filter">
                  {{ element_nav_widget({'ctype':ctype, 'selector':'cet'}) }}
                </ul>
                </div>
                <div class="o-grid__cell">
                  <h6>Content</h6>
                    {{ grid_view_widget({
                      'dataProvider': dataProvider,
                      'columns': columns,
                      'tableOptions': {'class':'table table-striped'}
                    }) | raw }}
                </div>
              </div>

            {{ pjax_end() }}

        </div>
      </div>
    </div>
  </div>
</div>

<script type="riot/tag">
  <matrix_{{ formKey }}>
    <input type="hidden" ref="CrelishDynamicModel_{{ formKey }}" name="CrelishDynamicModel[{{ formKey }}]" id="CrelishDynamicModel_{{ formKey }}" value="{ JSON.stringify(data) }" />
    <div class="o-grid o-grid--no-gutter">
      <div class="o-grid__cell" each="{ value, name in data }">
        <span class="c-badge">{ name }</span>

        <div id="sortable_{{ formKey }}">
          <div class="c-card" ref-area={ name } each={ value }>
            <div role="separator" class="c-card__item c-card__item--divider">
            <span class="glyphicon glyphicon-move
fa fa-arrows-alt" aria-hidden="true"></span> <strong>{ info[0].value }</strong>
              <span class="c-input-group pull-right">
                <a class="c-button gc-bc--palette-wetasphalt u-xsmall" href="/crelish/content/update?ctype={ ctype }&uuid={ uuid }" target="_blank"><i class="fa fa-edit"></i></a>
                <a class="c-button gc-bc--palette-pomgranate u-xsmall" onclick={ parent.removeItem }><i class="fa fa-trash"></i></a>
              </span>
            </div>
            <div class="c-card__content u-window-box-small">
              <dl>
                <span each={  item, index in info } if={ index > 0 }>
                  <dt>{ item.label }</dt>
                  <dd>{ item.value }</dd>
                </span>
              </dl>
            </div>
          </div>
        </div>
        <button type="button" onclick={ addContent } class="c-button c-button--ghost-primary c-button--block gc-mt--1" data-target=".matrix-modal-{{ formKey }}" >Add content</button>
      </div>
    </div>

    // Logic goes here.
    this.data = opts.data
    var app = this
    var targetArea = 'main'

    var activateContentMatrix = function() {
      var wrap = this

      $("#matrix-modal-{{ formKey }} a.cntAdd").each(function () {
        $(this).on('click', function (e) {
          e.preventDefault()
          var content = $(this).data("content")

          if(content) {
            content.area = targetArea
            wrap.data[targetArea].push(content)
          }

          $('.matrix-modal-{{ formKey }}').modal('hide')
          wrap.update()
        })
      })
    }.bind(this)
  
    addContent(e) {
      e.preventDefault()
      $('.matrix-modal-{{ formKey }}').modal('show')
    }

    removeItem(e) {
      var item = e.item
      var index = this.data[item.area].indexOf(item)
      this.data[item.area].splice(index, 1)
    }

    this.on("mount", function() {
      var that = this;
      var matrixData = app.data;
      var el = document.getElementById('sortable_{{ formKey }}');

      if(el) {
        var sortable = new Draggable.Sortable(el, {
          draggable: '.c-card',
          handle: '.glyphicon-move',
          mirror: {
            appendTo: '#sortable_{{ formKey }}',
            constrainDimensions: true,
          },
        });
        sortable.on('sortable:sorted', function(evt){
          console.log(evt.data.oldIndex, evt.data.newIndex)
          matrixData.main.move(evt.data.oldIndex, evt.data.newIndex)
          app.data = matrixData;
          app.update();
        });
      }

      $("#matrix-modal-{{ formKey }}").on('pjax:end', function () {
        activateContentMatrix();
      });

      $("#matrix-modal-{{ formKey }}").on('shown.bs.modal', function (e) {
        activateContentMatrix();
      });
    });
  </matrix_{{ formKey }}>

</script>

<script type="text/javascript">
  Array.prototype.move = function (old_index, new_index) {
    if (new_index >= this.length) {
      var k = new_index - this.length;
      while ((k--) + 1) {
        this.push(undefined);
      }
    }
    this.splice(new_index, 0, this.splice(old_index, 1)[0]);
    return this; // for testing purposes
  };

  var tags_{{ formKey }} = riot.mount('matrix_{{ formKey }}', {
    data: {{ processedData | raw }}
  });
</script>


{% apply registerCss %}
#contentList {
  padding-top: 1.333rem;
}

.content-filter {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  font-weight: 600;
  flex-wrap: wrap;
  flex-direction: column;
  gap: 0;
}

.content-filter li {
  padding: 0;
}

#contentList .content-filter li a {
  padding: 0;
}
{% endapply %}
