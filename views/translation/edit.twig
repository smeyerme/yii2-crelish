<style>
	.translation-container {
		display: flex;
		height: calc(100vh - 240px); /* Adjusted for card padding and header */
		margin-bottom: 0;
	}

	.tab-navigation {
		width: 250px;
		overflow-y: auto;
		border-right: 1px solid #ddd;
		background-color: #f8f9fa; /* Lighter background that matches card better */
		border-radius: 4px 0 0 4px; /* Rounded left corners */
	}

	.tab-content {
		flex: 1;
		overflow-y: auto;
		padding: 0 20px;
	}

	.category-tab {
		padding: 12px 15px;
		cursor: pointer;
		border-bottom: 1px solid #ddd;
		transition: background-color 0.2s;
	}

	.category-tab:hover {
		background-color: rgba(0, 0, 0, 0.04); /* More subtle hover effect */
	}

	.category-tab.active {
		background-color: var(--color-primary-light, #007bff);
		color: white;
		font-weight: bold;
		box-shadow: inset 3px 0 0 var(--color-primary-dark, #0056b3); /* Left border indicator */
	}

	.category-content {
		display: none;
	}

	.category-content.active {
		display: block;
	}

	.search-container {
		padding: 1.333rem 1.333rem 0 1.333rem;
		background-color: #f8f9fa;
		position: sticky;
		top: 0;
		z-index: 10;
	}

	.search-input {
		width: 100%;
		padding: 8px 12px;
		border: 1px solid #ced4da;
		border-radius: 4px;
		font-size: 16px;
	}

	.translation-row {
		display: flex;
		margin-bottom: 10px;
		padding: 12px;
		border-radius: var(--border-radius-md, 4px);
		transition: all 0.2s ease;
		border: 1px solid transparent; /* Transparent border for smooth hover transition */
	}

	.translation-row:nth-of-type(odd) {
		background-color: rgba(0, 0, 0, 0.02); /* Very subtle alternating row color */
	}

	.translation-row:hover {
		background-color: rgba(0, 0, 0, 0.05); /* Very subtle hover state */
		border-color: rgba(0, 0, 0, 0.1); /* Light border on hover */
		transform: translateY(-1px); /* Slight lift effect */
		box-shadow: var(--shadow-sm, 0 1px 3px rgba(0,0,0,0.1)); /* Subtle shadow on hover */
	}

	.translation-row > label {
		flex: 2;
		padding: 8px 0;
		font-weight: 500;
		color: #495057;
	}

	.translation-row > textarea {
		flex: 3;
		padding: 8px;
		border: 1px solid #ced4da;
		border-radius: 4px;
		resize: vertical;
		min-height: 38px;
		font-family: inherit;
		transition: border-color 0.15s;
	}

	.translation-row > textarea:focus {
		border-color: #80bdff;
		outline: 0;
		box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
	}

	.action-bar {
		position: sticky;
		bottom: 0;
		background-color: white;
		padding: 15px 0;
		border-top: 1px solid #ddd;
		margin-top: 20px;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.save-button {
		padding: 10px 20px;
		background-color: #007bff;
		color: white;
		border: none;
		border-radius: 4px;
		cursor: pointer;
		transition: background-color 0.2s;
	}

	.save-button:hover {
		background-color: #0069d9;
	}

	.language-selector {
		padding: 8px 12px;
		border: 1px solid #ced4da;
		border-radius: 4px;
		margin-left: 10px;
		cursor: pointer;
	}

	.no-results {
		padding: 20px;
		text-align: center;
		color: #6c757d;
		font-style: italic;
	}

	/* Dark mode styles for translation interface */
	[data-theme="dark"] .tab-navigation {
		background-color: var(--color-bg-light); /* Lighter and more subtle in dark mode */
		border-right-color: var(--color-border);
	}

	[data-theme="dark"] .category-tab {
		border-bottom-color: var(--color-border);
		color: var(--color-text-light);
	}

	[data-theme="dark"] .category-tab:hover {
		background-color: rgba(255, 255, 255, 0.05); /* Subtle hover effect in dark mode */
	}

	[data-theme="dark"] .category-tab.active {
		background-color: var(--color-primary-light);
		color: var(--color-text-light);
	}

	[data-theme="dark"] .category-content h2 {
		color: var(--color-text-light);
	}

	[data-theme="dark"] .translation-row {
		background-color: transparent; /* No background by default */
		border-color: transparent;
	}

	[data-theme="dark"] .translation-row:nth-of-type(odd) {
		background-color: rgba(255, 255, 255, 0.02); /* Very subtle alternating row color in dark mode */
	}

	[data-theme="dark"] .translation-row:hover {
		background-color: rgba(255, 255, 255, 0.05); /* Very subtle hover in dark mode */
		border-color: rgba(255, 255, 255, 0.1); /* Light border on hover */
		transform: translateY(-1px);
		box-shadow: var(--shadow-sm);
	}

	[data-theme="dark"] .translation-row > label {
		color: var(--color-text-light);
	}

	[data-theme="dark"] .translation-row > textarea {
		background-color: var(--color-bg-light);
		border-color: var(--color-border);
		color: var(--color-text-light);
	}

	[data-theme="dark"] .translation-row > textarea:focus {
		border-color: var(--color-primary-light);
		outline: 0;
		box-shadow: 0 0 0 0.2rem rgba(var(--color-primary-light-rgb), 0.25);
	}

	[data-theme="dark"] .no-results {
		color: var(--color-text-muted);
	}

	/* For smaller screens */
	@media (max-width: 768px) {
		.translation-container {
			flex-direction: column;
			height: auto;
		}

		.tab-navigation {
			width: 100%;
			max-height: 200px;
			border-right: none;
			border-bottom: 1px solid #ddd;
		}

		.translation-row {
			flex-direction: column;
		}

		.translation-row > label {
			margin-bottom: 8px;
		}
	}

	textarea {
		field-sizing: content;
	}
</style>

<script>
	$(document).ready(function() {
		// Restore search term from session storage if available
		const savedSearchTerm = sessionStorage.getItem('translationSearchTerm');
		if (savedSearchTerm) {
			$('#global-search').val(savedSearchTerm);
			filterTranslations(savedSearchTerm.toLowerCase());
		}

		// Function to resize textarea
		function resizeTextarea(textarea) {
			$(textarea).css('height', 'auto').css('height', textarea.scrollHeight + 'px');
		}

		// Initial resize
		setTimeout(function() {
			$('textarea').each(function() {
				resizeTextarea(this);
			});
		}, 50);

		// Resize on input
		$(document).on('input', 'textarea', function() {
			resizeTextarea(this);
		});

		// Tab functionality
		$('.category-tab').on('click', function() {
			setTimeout(function() {
				$('.category-content.active textarea').each(function() {
					resizeTextarea(this);
				});
			}, 10);

			// Remove active class from all tabs and content
			$('.category-tab').removeClass('active');
			$('.category-content').removeClass('active');

			// Add active class to clicked tab and corresponding content
			$(this).addClass('active');
			const categoryId = $(this).data('category');
			$('#' + categoryId).addClass('active');

			// Reapply current search filter to the new tab content
			const currentSearch = $('#global-search').val().toLowerCase();
			if (currentSearch.length > 0) {
				filterTranslations(currentSearch);
			}
		});

		// Activate first tab by default
		$('.category-tab:first').click();

		// Global search functionality
		$('#global-search').on('input', function() {
			const searchTerm = $(this).val().toLowerCase();
			filterTranslations(searchTerm);

			// Save search term to sessionStorage to persist between tab changes
			sessionStorage.setItem('translationSearchTerm', $(this).val());
		});

		// Function to filter translations
		function filterTranslations(searchTerm) {
			let anyVisible = false;

			if (searchTerm === '') {
				// If search is empty, show all rows and hide no-results message
				$('.translation-row').show();
				$('.no-results').hide();
				return;
			}

			// Get active tab content for targeted filtering
			const activeTabContent = $('.category-content.active');

			// Filter rows based on label text or textarea value in active tab only
			activeTabContent.find('.translation-row').each(function() {
				const labelText = $(this).find('label').text().toLowerCase();
				const translationText = $(this).find('textarea').val().toLowerCase();

				if (labelText.includes(searchTerm) || translationText.includes(searchTerm)) {
					$(this).show();
					anyVisible = true;
				} else {
					$(this).hide();
				}
			});

			// Show/hide no results message
			if (!anyVisible) {
				// Remove any existing no-results message first
				activeTabContent.find('.no-results').remove();
				// Add no-results message to active tab
				activeTabContent.append('<div class="no-results">No matching translations found</div>');
			} else {
				activeTabContent.find('.no-results').hide();
			}
		}
	});

	function changeLanguage() {
		var selectedLanguage = document.getElementById('language-select').value;
		var currentLanguage = '{{ app.request.get('language') }}';

		if (selectedLanguage !== currentLanguage) {
			// Clear search term from sessionStorage when changing language
			sessionStorage.removeItem('translationSearchTerm');

			var url = new URL(window.location);
			url.searchParams.set('language', selectedLanguage);
			window.location.href = url.href;
		}
	}

	$(window).on('load', function() {
		$('textarea').each(function() {
			$(this).css('height', 'auto');
			$(this).css('height', this.scrollHeight + 'px');
		});
	});
</script>

<!-- Search is now in the header bar -->

<div class="card">
	<div class="card-body">
		{% if app.params.crelish.languages|length > 1 %}
			<div class="language-selector-container" style="
				display: flex;
				width: 100%;
				background-color: var(--color-bg-light);
				padding: 1rem;
				border-radius: var(--border-radius-md);
				margin-bottom: 1.5rem;
				border: 1px solid var(--color-border);
				justify-content: space-between;
				align-items: center;
				font-weight: 500;">
				<span>{{ t('app', 'Select language to edit:') }}</span>
				<select id="language-select" class="language-selector form-select" onchange="changeLanguage()" style="
					width: auto;
					max-width: 150px;">
					{% for lang in app.params.crelish.languages %}
						<option value="{{ lang }}" {% if lang == app.request.get('language') %}selected{% endif %}>
							{{ lang|upper }}
						</option>
					{% endfor %}
				</select>
			</div>
		{% endif %}

		<form id="content-form" method="post" action="{{ path('/crelish/translation/save', {'language': language}) }}">
			<input type="hidden" name="{{ _csrfParam }}" value="{{ _csrfToken }}">

			<div class="translation-container">
				<!-- Tab navigation -->
				<div class="tab-navigation">
					{% for category, items in translations %}
						<div class="category-tab" data-category="category-{{ category | slugify }}">
							{{ category }}
						</div>
					{% endfor %}
				</div>

				<!-- Tab content -->
				<div class="tab-content">
					{% for category, items in translations %}
						<div id="category-{{ category | slugify }}" class="category-content">
							<h2>{{ category }}</h2>

							{% for key, value in items %}
								<div class="translation-row">
									<label for="textarea-{{ category }}-{{ key | slugify }}">{{ key | raw }}</label>
									<textarea id="textarea-{{ category }}-{{ key | slugify }}"
													name="Translations[{{ category }}][{{ key }}]">{{ value }}</textarea>
								</div>
							{% endfor %}
						</div>
					{% endfor %}
				</div>
			</div>
		</form>
	</div>
</div>