/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/relation-selector.js":
/*!*********************************!*\
  !*** ./js/relation-selector.js ***!
  \*********************************/
/***/ (() => {

eval("/**\n * Relation Selector - jQuery implementation\n * This component replaces the Vue-based implementation with jQuery and Select2\n */\n(function ($) {\n  'use strict';\n\n  // Initialize when DOM is ready\n  $(document).ready(function () {\n    // Initialize all relation selector containers\n    $('.relation-selector-container').each(function () {\n      initializeRelationSelector($(this));\n    });\n  });\n\n  /**\n   * Initialize a single relation selector\n   * @param {JQuery} container - The container element\n   */\n  function initializeRelationSelector(container) {\n    // Get configuration from data attributes\n    const config = {\n      fieldKey: container.data('field-key'),\n      contentType: container.data('content-type'),\n      value: container.data('value'),\n      inputName: container.data('input-name'),\n      label: container.data('label') || '',\n      required: container.data('required') === 'true',\n      isMultiple: container.data('multiple') === 'true',\n      columns: container.data('columns') || [{\n        key: 'systitle',\n        label: 'Titel'\n      }],\n      filterFields: container.data('filter-fields') || ['systitle']\n    };\n\n    // Get translations\n    const translations = window.relationSelectorTranslations || {};\n\n    // Create the HTML structure\n    createHtmlStructure(container, config, translations);\n\n    // Initialize Select2 and other behaviors\n    if (config.isMultiple) {\n      initializeMultipleMode(container, config, translations);\n    } else {\n      initializeSingleMode(container, config, translations);\n    }\n  }\n\n  /**\n   * Create the HTML structure for the component\n   * @param {JQuery} container - The container element\n   * @param {Object} config - Configuration object\n   * @param {Object} translations - Translations object\n   */\n  function createHtmlStructure(container, config, translations) {\n    let html = `\n      <div class=\"relation-selector ${config.required ? 'required' : ''}\">\n        ${config.label ? `<div class=\"relation-selector-label form-label has-star\">${config.label}</div>` : ''}\n    `;\n\n    // Add single or multiple mode HTML\n    if (!config.isMultiple) {\n      html += `\n        <div class=\"single-relation-mode\">\n          <select class=\"single-relation-select form-control\" name=\"${config.inputName}-select\">\n            <option value=\"\">${translations.choosePlaceholder || 'Bitte wählen...'}</option>\n          </select>\n        </div>\n      `;\n    } else {\n      html += `\n        <div class=\"multiple-relation-mode\">\n          <div class=\"selection-interface mb-3\">\n            <div class=\"row\">\n              <div class=\"col-10\">\n                <select class=\"multiple-relation-select form-control\" name=\"${config.inputName}-select\">\n                  <option value=\"\">${translations.choosePlaceholder || 'Bitte wählen...'}</option>\n                </select>\n              </div>\n              <div class=\"col-2\">\n                <button type=\"button\" class=\"btn btn-primary add-button\">\n                  <i class=\"fa fa-plus\"></i> ${translations.addButton || 'Hinzufügen'}\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"selected-items-container mt-3\" style=\"display: none;\">\n            <h6>${translations.assignedItems || 'Zugeordnete Einträge'}</h6>\n            <div class=\"table-responsive\">\n              <table class=\"table crelish-list\">\n                <thead>\n                  <tr>\n                    ${config.columns.map(column => `<th>${column.label}</th>`).join('')}\n                    <th>${translations.actions || 'Aktionen'}</th>\n                  </tr>\n                </thead>\n                <tbody class=\"selected-items-list\"></tbody>\n              </table>\n            </div>\n          </div>\n          \n          <div class=\"no-items-message\">\n            ${translations.noItemsSelected || 'Keine Einträge ausgewählt'}\n          </div>\n        </div>\n      `;\n    }\n\n    // Add hidden input to store the actual value\n    html += `\n        <input type=\"hidden\" name=\"${config.inputName}\" class=\"relation-value-input\" value=\"${config.value || ''}\">\n      </div>\n    `;\n\n    // Set the HTML\n    container.html(html);\n  }\n\n  /**\n   * Initialize the component in single selection mode\n   * @param {JQuery} container - The container element\n   * @param {Object} config - Configuration object\n   * @param {Object} translations - Translations object\n   */\n  function initializeSingleMode(container, config, translations) {\n    const selectElement = container.find('.single-relation-select');\n    const hiddenInput = container.find('.relation-value-input');\n\n    // Initialize Select2 with remote data\n    selectElement.select2({\n      theme: 'bootstrap',\n      allowClear: !config.required,\n      placeholder: translations.choosePlaceholder || 'Bitte wählen...',\n      ajax: {\n        url: `/crelish-api/content/${config.contentType}`,\n        dataType: 'json',\n        delay: 350,\n        data: function (params) {\n          const filterData = {\n            page: params.page || 1\n          };\n\n          // Add filter if we have a search term\n          if (params.term) {\n            filterData.filter = config.filterFields.map(field => `${field}:${params.term}`).join('&');\n          }\n          return filterData;\n        },\n        processResults: function (data, params) {\n          params.page = params.page || 1;\n          let results = [];\n          if (data.success && data.data && data.data.items) {\n            results = data.data.items.map(item => ({\n              id: item.uuid,\n              text: item.systitle || item.title || item.name || item.uuid,\n              data: item\n            }));\n          }\n          return {\n            results: results,\n            pagination: {\n              more: params.page * 20 < (data.data?.total || 0)\n            }\n          };\n        },\n        cache: true\n      },\n      minimumInputLength: 0\n    });\n\n    // Handle selection change\n    selectElement.on('select2:select', function (e) {\n      const selectedId = e.params.data.id;\n      hiddenInput.val(selectedId);\n\n      // Trigger change event for form validation\n      hiddenInput.trigger('change');\n    });\n\n    // Handle clearing\n    selectElement.on('select2:clear', function () {\n      hiddenInput.val('');\n      hiddenInput.trigger('change');\n    });\n\n    // Load initial value if any\n    if (config.value && config.value !== '[]' && config.value !== '{}') {\n      let initialId = config.value;\n\n      // Try to parse as JSON if it looks like JSON\n      if (config.value.startsWith('[') || config.value.startsWith('{')) {\n        try {\n          const parsed = JSON.parse(config.value);\n          if (Array.isArray(parsed) && parsed.length > 0) {\n            initialId = parsed[0];\n          } else if (parsed && typeof parsed === 'object' && parsed.uuid) {\n            initialId = parsed.uuid;\n          }\n        } catch (e) {\n          // Not valid JSON, use as is\n          console.warn('Failed to parse initial value as JSON', e);\n        }\n      }\n\n      // Only fetch if we have a valid UUID\n      if (initialId && typeof initialId === 'string' && initialId.trim() !== '') {\n        $.ajax({\n          url: `/crelish-api/content/${config.contentType}/${initialId}`,\n          method: 'GET',\n          success: function (response) {\n            if (response.success && response.data) {\n              const item = response.data;\n              const option = new Option(item.systitle || item.title || item.name || item.uuid, item.uuid, true, true);\n              selectElement.append(option).trigger('change');\n              hiddenInput.val(item.uuid);\n            }\n          },\n          error: function (xhr, status, error) {\n            console.error('Error loading initial item:', error);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Initialize the component in multiple selection mode\n   * @param {JQuery} container - The container element \n   * @param {Object} config - Configuration object\n   * @param {Object} translations - Translations object\n   */\n  function initializeMultipleMode(container, config, translations) {\n    const selectElement = container.find('.multiple-relation-select');\n    const hiddenInput = container.find('.relation-value-input');\n    const addButton = container.find('.add-button');\n    const selectedItemsList = container.find('.selected-items-list');\n    const selectedItemsContainer = container.find('.selected-items-container');\n    const noItemsMessage = container.find('.no-items-message');\n\n    // Array to store selected items\n    let selectedItems = [];\n\n    // Initialize Select2 with remote data\n    selectElement.select2({\n      theme: 'bootstrap',\n      allowClear: true,\n      placeholder: translations.choosePlaceholder || 'Bitte wählen...',\n      ajax: {\n        url: `/crelish-api/content/${config.contentType}`,\n        dataType: 'json',\n        delay: 350,\n        data: function (params) {\n          const filterData = {\n            page: params.page || 1\n          };\n\n          // Add filter if we have a search term\n          if (params.term) {\n            filterData.filter = config.filterFields.map(field => `${field}:${params.term}`).join('&');\n          }\n          return filterData;\n        },\n        processResults: function (data, params) {\n          params.page = params.page || 1;\n          let results = [];\n          if (data.success && data.data && data.data.items) {\n            results = data.data.items.map(item => ({\n              id: item.uuid,\n              text: item.systitle || item.title || item.name || item.uuid,\n              data: item\n            }));\n          }\n          return {\n            results: results,\n            pagination: {\n              more: params.page * 20 < (data.data?.total || 0)\n            }\n          };\n        },\n        cache: true\n      },\n      minimumInputLength: 0\n    });\n\n    // Handle add button click\n    addButton.on('click', function () {\n      const selectedOption = selectElement.select2('data')[0];\n      if (!selectedOption) return;\n\n      // Check if the item is already in the list\n      const exists = selectedItems.some(item => item.uuid === selectedOption.id);\n      if (exists) {\n        alert(translations.itemAlreadyAdded || 'Dieser Eintrag wurde bereits hinzugefügt');\n        return;\n      }\n\n      // Add the item\n      if (selectedOption.data) {\n        // We already have the full data from Select2\n        addItemToList(selectedOption.data);\n      } else {\n        // Fetch the full data\n        $.ajax({\n          url: `/crelish-api/content/${config.contentType}/${selectedOption.id}`,\n          method: 'GET',\n          success: function (response) {\n            if (response.success && response.data) {\n              addItemToList(response.data);\n            }\n          },\n          error: function (xhr, status, error) {\n            console.error('Error fetching item:', error);\n            alert('Error fetching data from API');\n          }\n        });\n      }\n\n      // Clear the selection\n      selectElement.val(null).trigger('change');\n    });\n\n    // Function to add an item to the list\n    function addItemToList(item) {\n      // Add to our array\n      selectedItems.push(item);\n\n      // Create table row\n      const row = $('<tr>').attr('data-id', item.uuid);\n\n      // Add data columns\n      config.columns.forEach(column => {\n        const value = getNestedProperty(item, column.key) || '';\n        row.append($('<td>').text(value));\n      });\n\n      // Add action buttons\n      const actionsCell = $('<td class=\"actions\">');\n\n      // Add up/down buttons\n      actionsCell.append($('<button type=\"button\" class=\"c-button u-small move-up\" title=\"Nach oben\">').html('<i class=\"fa fa-arrow-up\"></i>').css('display', 'none') // Initially hidden, will show/hide as needed\n      );\n      actionsCell.append($('<button type=\"button\" class=\"c-button u-small move-down\" title=\"Nach unten\">').html('<i class=\"fa fa-arrow-down\"></i>').css('display', 'none') // Initially hidden, will show/hide as needed\n      );\n\n      // Add delete button\n      actionsCell.append($('<button type=\"button\" class=\"c-button u-small remove-item\" title=\"Löschen\">').html('<i class=\"fa-sharp fa-regular fa-trash\"></i>'));\n      row.append(actionsCell);\n\n      // Add to the table\n      selectedItemsList.append(row);\n\n      // Show the table if it's the first item\n      if (selectedItems.length === 1) {\n        selectedItemsContainer.show();\n        noItemsMessage.hide();\n      }\n\n      // Update up/down buttons for all rows\n      updateMoveButtons();\n\n      // Update hidden input\n      updateHiddenInput();\n    }\n\n    // Function to remove an item from the list\n    function removeItem(uuid) {\n      // Remove from our array\n      selectedItems = selectedItems.filter(item => item.uuid !== uuid);\n\n      // Remove from the table\n      selectedItemsList.find(`tr[data-id=\"${uuid}\"]`).remove();\n\n      // Hide the table if there are no items\n      if (selectedItems.length === 0) {\n        selectedItemsContainer.hide();\n        noItemsMessage.show();\n      }\n\n      // Update up/down buttons for all rows\n      updateMoveButtons();\n\n      // Update hidden input\n      updateHiddenInput();\n    }\n\n    // Function to move an item up in the list\n    function moveItemUp(uuid) {\n      const index = selectedItems.findIndex(item => item.uuid === uuid);\n      if (index > 0) {\n        // Swap in the array\n        const temp = selectedItems[index - 1];\n        selectedItems[index - 1] = selectedItems[index];\n        selectedItems[index] = temp;\n\n        // Swap in the DOM\n        const row = selectedItemsList.find(`tr[data-id=\"${uuid}\"]`);\n        row.insertBefore(row.prev());\n\n        // Update up/down buttons\n        updateMoveButtons();\n\n        // Update hidden input\n        updateHiddenInput();\n      }\n    }\n\n    // Function to move an item down in the list\n    function moveItemDown(uuid) {\n      const index = selectedItems.findIndex(item => item.uuid === uuid);\n      if (index < selectedItems.length - 1) {\n        // Swap in the array\n        const temp = selectedItems[index + 1];\n        selectedItems[index + 1] = selectedItems[index];\n        selectedItems[index] = temp;\n\n        // Swap in the DOM\n        const row = selectedItemsList.find(`tr[data-id=\"${uuid}\"]`);\n        row.insertAfter(row.next());\n\n        // Update up/down buttons\n        updateMoveButtons();\n\n        // Update hidden input\n        updateHiddenInput();\n      }\n    }\n\n    // Function to update the move buttons visibility\n    function updateMoveButtons() {\n      const rows = selectedItemsList.find('tr');\n\n      // Hide all buttons first\n      rows.find('.move-up, .move-down').hide();\n\n      // If there's only one item, no need for move buttons\n      if (rows.length <= 1) return;\n\n      // Show move up button for all except the first\n      rows.slice(1).find('.move-up').show();\n\n      // Show move down button for all except the last\n      rows.slice(0, -1).find('.move-down').show();\n    }\n\n    // Function to update the hidden input value\n    function updateHiddenInput() {\n      // Get just the UUIDs for storage\n      const uuids = selectedItems.map(item => item.uuid);\n      hiddenInput.val(JSON.stringify(uuids));\n\n      // Trigger change event for form validation\n      hiddenInput.trigger('change');\n    }\n\n    // Handle click events for the buttons\n    selectedItemsList.on('click', '.remove-item', function () {\n      const uuid = $(this).closest('tr').data('id');\n      removeItem(uuid);\n    });\n    selectedItemsList.on('click', '.move-up', function () {\n      const uuid = $(this).closest('tr').data('id');\n      moveItemUp(uuid);\n    });\n    selectedItemsList.on('click', '.move-down', function () {\n      const uuid = $(this).closest('tr').data('id');\n      moveItemDown(uuid);\n    });\n\n    // Load initial items if any\n    if (config.value && config.value !== '[]' && config.value !== '{}') {\n      let initialIds = [];\n\n      // Try to parse as JSON\n      try {\n        const parsed = JSON.parse(config.value);\n        if (Array.isArray(parsed)) {\n          initialIds = parsed.filter(id => id && typeof id === 'string' && id.trim() !== '');\n        } else if (parsed && typeof parsed === 'object' && parsed.uuid) {\n          initialIds = [parsed.uuid];\n        }\n      } catch (e) {\n        // Not valid JSON, try as a single value\n        if (config.value && typeof config.value === 'string' && config.value.trim() !== '') {\n          initialIds = [config.value];\n        }\n      }\n\n      // Fetch each item\n      if (initialIds.length > 0) {\n        // Show loading indicator\n        noItemsMessage.text(translations.loadingOptions || 'Lade Optionen...');\n\n        // Create a counter to track when all items are loaded\n        let loadedCount = 0;\n        initialIds.forEach(id => {\n          $.ajax({\n            url: `/crelish-api/content/${config.contentType}/${id}`,\n            method: 'GET',\n            success: function (response) {\n              if (response.success && response.data) {\n                addItemToList(response.data);\n              }\n\n              // Update counter\n              loadedCount++;\n\n              // If we're done loading, reset the message\n              if (loadedCount === initialIds.length) {\n                noItemsMessage.text(translations.noItemsSelected || 'Keine Einträge ausgewählt');\n              }\n            },\n            error: function (xhr, status, error) {\n              console.error('Error loading initial item:', error);\n\n              // Update counter\n              loadedCount++;\n\n              // If we're done loading, reset the message\n              if (loadedCount === initialIds.length) {\n                noItemsMessage.text(translations.noItemsSelected || 'Keine Einträge ausgewählt');\n              }\n            }\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * Helper function to get a nested property from an object\n   * @param {Object} obj - The object to get the property from\n   * @param {string} path - The path to the property, can use dot notation\n   * @returns {*} - The value of the property, or empty string if not found\n   */\n  function getNestedProperty(obj, path) {\n    if (!obj || !path) return '';\n\n    // Handle nested properties with dot notation\n    if (path.includes('.')) {\n      let value = obj;\n      const parts = path.split('.');\n      for (const part of parts) {\n        if (value && typeof value === 'object' && part in value) {\n          value = value[part];\n        } else {\n          return '';\n        }\n      }\n      return value;\n    }\n    return obj[path] || '';\n  }\n})(jQuery);\n\n//# sourceURL=webpack://relation-selector/./js/relation-selector.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/relation-selector.js"]();
/******/ 	
/******/ })()
;