<?php

namespace giantbits\crelish\widgets;

use giantbits\crelish\components\CrelishDataProvider;
use kartik\widgets\DatePicker;
use yii\base\DynamicModel;
use yii\base\InvalidConfigException;
use yii\base\Widget;
use yii\db\Exception;
use yii\helpers\Html;
use yii\helpers\Url;

class DownloadStats extends Widget
{
	
	private $usermode = false;
	private $filter = true;
	
	public function __construct($config = [])
  {
		
		if(!empty($config['usermode']) && $config['usermode'] === true) {
			$this->usermode = $config['usermode'];
		}
		
	  if(array_key_exists('filter', $config) && $config['filter'] === false) {
		  $this->filter = false;
	  }
		
    parent::__construct(); // TODO: Change the autogenerated stub
  }

  public function init()
  {
	  \Yii::$app->view->registerJsFile('https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js');
	  \Yii::$app->view->registerJsFile('https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0');
		
    parent::init();
  }
	
	/**
	 * @throws Exception
	 * @throws InvalidConfigException
	 */
	public function run()
  {
		$labels = $data = [];
	  $where = '';
	  $labels = [];
	  $data = [];
	  $barUrls = [];
		
	  $model = new DynamicModel([
		  'from', 'to'
	  ]);
		
		$model->setAttributeLabels([
			'from'  => \Yii::t('app', 'Von'),
			'to'  => \Yii::t('app', 'Bis')
		]);
	 
		$model
			->addRule(['from','to'], 'required');
		
	  if($model->load(\Yii::$app->request->post())){
			if($model->validate()) {
				$where = 'WHERE (downloadstats.downloadDate >= ' . strtotime($model->from . ' 00:00:01' ) . ' AND downloadstats.downloadDate <= ' . strtotime($model->to . ' 23:59:59') . ') ';
			}
	  }
		
		if($this->usermode) {
			$where = 'WHERE downloadstats.user = "' . \Yii::$app->user->identity->getId() . '"';
		}
		
		$limit = $this->usermode ? 1000 : 50;
		
	  $downloadStats = \Yii::$app->db->createCommand('SELECT
			COUNT(1) AS occurrences,
			`document`.uuid as docId,
			`document`.systitle as doctitle,
			`event`.systitle as eventtitle
			FROM downloadstats
			INNER JOIN document ON document.filename = downloadstats.document
			LEFT OUTER JOIN `event` ON `document`.`event` = `event`.`uuid`
			' . $where  . '
			GROUP BY document
			ORDER BY occurrences DESC
			LIMIT ' . $limit)
	    ->queryAll();
	  
	  foreach ($downloadStats as $downloadStat) {
			$append =  (strlen($downloadStat['doctitle']) > 44 ) ? '...' : '';
			$labels[] = substr($downloadStat['doctitle'], 0 , 44) . $append;
		  $data[] = (int) $downloadStat['occurrences'];
		  $barUrls[] = $this->usermode ? '#' : '/crelish/content/update?ctype=document&uuid=' . $downloadStat['docId'];
		}
		
		$datePickerWidget = DatePicker::class;
		
		return $this->render('download_stats.twig', [
			'datePicker' => $datePickerWidget,
			'model' => $model,
			'barUrls' => json_encode($barUrls),
			'labels' => json_encode($labels),
			'data' => json_encode($data),
			'filter' => $this->filter
		]);
  }
}
