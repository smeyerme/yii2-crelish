<?php

namespace giantbits\crelish\components;

use DeepL\DeepLException;
use DeepL\Translator;
use Doctrine\Inflector\Language;
use Scn\DeeplApiConnector\DeeplClientFactory;
use Scn\DeeplApiConnector\Enum\LanguageEnum;
use Scn\DeeplApiConnector\Exception\RequestException;
use Scn\DeeplApiConnector\Model\TranslationConfig;
use Yii;
use yii\i18n\MissingTranslationEvent;
use function _\upperCase;

/**
 * Event handler for missing translations in Crelish CMS
 * 
 * This handler automatically translates missing translations using DeepL API
 * when enabled and stores them in translation files for future use.
 * 
 * Configuration in params.php:
 * - languages: Array of supported languages (e.g., ['de', 'en', 'fr'])
 * - crelish.enable_autotranslation: Boolean to enable/disable auto-translation
 * 
 * Environment variables:
 * - DEEPL_API_KEY: Your DeepL API key for translation service
 */
class CrelishI18nEventHandler
{

  /**
   * Handle missing translation events
   * 
   * @param MissingTranslationEvent $event The missing translation event
   * @return void
   */
  public static function handleMissingTranslation(MissingTranslationEvent $event): void
  {
    if (empty($event->message)) {
      return;
    }

    // Check if the language is in the list of supported languages
    $supportedLanguages = Yii::$app->params['languages'] ?? [];
    if (!empty($supportedLanguages) && !in_array($event->language, $supportedLanguages)) {
      // Language not supported, don't translate
      $event->translatedMessage = $event->message;
      return;
    }
    
    // Check if target language is same as source language
    $sourceLanguage = Yii::$app->sourceLanguage ?? 'en';
    if ($event->language === $sourceLanguage || 
        strpos($event->language, $sourceLanguage) === 0 || 
        strpos($sourceLanguage, $event->language) === 0) {
      // Same language, no need to translate
      $event->translatedMessage = $event->message;
      return;
    }

    // Initialize vars
    $translatedText = null;
    $category = $event->category;
    $message = $event->message;
    $language = self::buildTargetLanguage($event->language);
    $apiKey = $_ENV['DEEPL_API_KEY'] ?? null;

    // Initialize file system
    $translationObject = null;
    $file = $event->sender->basePath . "/" . $event->language;

    if (!is_dir(\Yii::getAlias($file))) {
      mkdir(\Yii::getAlias($file));
    }

    $file = \Yii::getAlias($file) . "/" . $category . ".php";

    if (file_exists($file)) {
      $translation = include($file);
    } else {
      $translation = [];
    }

    if(Yii::$app->params['crelish']['enable_autotranslation'] ?? false) {
      // Check if API key is available
      if (empty($apiKey)) {
        Yii::warning('DeepL API key not found in environment variables', 'crelish.i18n');
      } else {
        try {
          // Start translation process
          $translator = new Translator($apiKey);

          $result = $translator->translateText(
            $message,
            strtoupper($sourceLanguage),
            strtoupper($language),
          );

          $translatedText = $result->text;
        } catch (DeepLException $e) {
          Yii::error('DeepL translation failed: ' . $e->getMessage(), 'crelish.i18n');
        } catch (\Exception $e) {
          Yii::error('Translation failed: ' . $e->getMessage(), 'crelish.i18n');
        }
      }
    }

    if ($translatedText) {
      $translation[$event->message] = $translatedText;
      ksort($translation);

      file_put_contents($file, "<?php \n// This file was autogenerated by CrelishI18n-Event Handler \n// You can savely edit it to your needs.\n// Last update: " . date("d.m.Y H:i:s", time()) . "\n\n return " . var_export($translation, true) . "; \n");
    } else {
      $translation[$event->message] = $event->message;
      ksort($translation);

      file_put_contents($file, "<?php \n// This file was autogenerated by CrelishI18n-Event Handler \n// You can savely edit it to your needs.\n// Last update: " . date("d.m.Y H:i:s", time()) . "\n\n return " . var_export($translation, true) . "; \n");
    }

    $event->translatedMessage = $event->message;
  }

  /**
   * Build DeepL target language code from application language code
   * 
   * @param string $language Application language code (e.g., 'en', 'de')
   * @return string DeepL language code (e.g., 'EN-US', 'DE')
   */
  private static function buildTargetLanguage(string $language): string
  {
    // Map common language codes to DeepL format
    $languageMap = [
      'en' => 'EN-US',
      'en-US' => 'EN-US',
      'en-GB' => 'EN-GB',
      'de' => 'DE',
      'de-DE' => 'DE',
      'de-AT' => 'DE',
      'de-CH' => 'DE',
      'fr' => 'FR',
      'fr-FR' => 'FR',
      'es' => 'ES',
      'es-ES' => 'ES',
      'it' => 'IT',
      'it-IT' => 'IT',
      'nl' => 'NL',
      'nl-NL' => 'NL',
      'pl' => 'PL',
      'pl-PL' => 'PL',
      'pt' => 'PT-PT',
      'pt-PT' => 'PT-PT',
      'pt-BR' => 'PT-BR',
      'ru' => 'RU',
      'ru-RU' => 'RU',
      'ja' => 'JA',
      'ja-JP' => 'JA',
      'zh' => 'ZH',
      'zh-CN' => 'ZH',
      'ko' => 'KO',
      'ko-KR' => 'KO',
    ];

    // Return mapped language or uppercase original if not found
    return $languageMap[$language] ?? strtoupper($language);
  }
}
